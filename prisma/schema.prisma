// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(cuid())
  name String

  users User[]
}

model User {
  id       String  @id @default(cuid())
  username String? @unique
  password String
  roleId   String? @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  News     News[]
  Sessions Session[]
  Roles    Role?     @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @unique @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum CategoryTypes {
  SERVICE
  PARTNER
  CLIENT
  NEWS
  EVENT
}

model Category {
  id   String        @id @default(cuid())
  name String
  type CategoryTypes

  serviceCategories ServiceCategory[]
  CategoryPartner   CategoryPartner[]
  clientCategories  ClientCategory[]
  NewsCategories    NewsCategory[]
  EventCategory     EventCategory[]
}

model Service {
  id           String  @id @default(cuid())
  name         String
  description  String
  slug         String  @unique
  imgUrl       String  @map("img_url")
  iconUrl      String? @map("icon_url")
  whiteIconUrl String? @map("white_icon_url")
  onSection    Boolean @default(false) @map("on_section")
  status       Boolean

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  serviceLists      ServiceList[]
  serviceCategories ServiceCategory[]

  @@map("services")
}

model ServiceList {
  id        String  @id @default(cuid())
  title     String
  order     Int
  serviceId String? @map("service_id")

  Services Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("services_list")
}

model ServiceCategory {
  serviceId  String
  categoryId String

  services   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([serviceId, categoryId])
  @@unique([serviceId, categoryId])
  @@map("service_categories")
}

model Partner {
  id      String @id @default(cuid())
  name    String
  logoUrl String @map("logo_url")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  categoryPartners CategoryPartner[]

  @@map("partners")
}

model CategoryPartner {
  partnerId  String
  categoryId String

  partners   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([partnerId, categoryId])
  @@unique([partnerId, categoryId])
  @@map("partner_categories")
}

model Client {
  id      String @id @default(cuid())
  name    String
  logoUrl String @map("logo_url")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  clientCategories ClientCategory[]

  @@map("clients")
}

model ClientCategory {
  clientId   String @map("client_id")
  categoryid String @map("category_id")

  clients    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  categories Category @relation(fields: [categoryid], references: [id], onDelete: Cascade)

  @@id([clientId, categoryid])
  @@unique([clientId, categoryid])
  @@map("client_categories")
}

enum NewsTypes {
  NEWS
  EVENT
}

model News {
  id          String    @id @default(cuid())
  title       String
  description String
  imgUrl      String    @map("img_url")
  userId      String    @map("user_id")
  type        NewsTypes @default(NEWS)

  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  newsCategories NewsCategory[]
  EventCategory  EventCategory[]

  @@map("news")
}

model NewsCategory {
  newsId     String @map("news_id")
  categoryId String @map("category_id")

  news       News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([newsId, categoryId])
  @@unique([newsId, categoryId])
  @@map("news_categories")
}

model EventCategory {
  newsId     String @map("news_id")
  categoryId String @map("category_id")

  news       News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  categories Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([newsId, categoryId])
  @@unique([newsId, categoryId])
  @@map("event_categories")
}

model Portofolio {
  id String @id @default(cuid())
}

model Section {
  id    String @id @default(cuid())
  name  String
  order Int
}

model UserComponentReference {
  id String @id @default(cuid())
}
